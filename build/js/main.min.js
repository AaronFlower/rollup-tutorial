!function(){"use strict";function e(e,n){return e(n={exports:{}},n.exports),n.exports}var n=1e3,r=60*n,t=60*r,s=24*t,o=365.25*s,a=function(e,a){a=a||{};var i,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!a)return;var c=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*o;case"days":case"day":case"d":return c*s;case"hours":case"hour":case"hrs":case"hr":case"h":return c*t;case"minutes":case"minute":case"mins":case"min":case"m":return c*r;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===u&&!1===isNaN(e))return a.long?c(i=e,s,"day")||c(i,t,"hour")||c(i,r,"minute")||c(i,n,"second")||i+" ms":function(e){if(e>=s)return Math.round(e/s)+"d";if(e>=t)return Math.round(e/t)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function c(e,n,r){if(!(e<n))return e<1.5*n?Math.floor(e/n)+" "+r:Math.ceil(e/n)+" "+r+"s"}var i=e(function(e,n){function r(e){var r;function s(){if(s.enabled){var e=s,t=+new Date,o=t-(r||t);e.diff=o,e.prev=r,e.curr=t,r=t;for(var a=new Array(arguments.length),c=0;c<a.length;c++)a[c]=arguments[c];a[0]=n.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var i=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(r,t){if("%%"===r)return r;i++;var s=n.formatters[t];if("function"==typeof s){var o=a[i];r=s.call(e,o),a.splice(i,1),i--}return r}),n.formatArgs.call(e,a),(s.log||n.log||console.log.bind(console)).apply(e,a)}}return s.namespace=e,s.enabled=n.enabled(e),s.useColors=n.useColors(),s.color=function(e){var r,t=0;for(r in e)t=(t<<5)-t+e.charCodeAt(r),t|=0;return n.colors[Math.abs(t)%n.colors.length]}(e),s.destroy=t,"function"==typeof n.init&&n.init(s),n.instances.push(s),s}function t(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}(n=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){n.enable("")},n.enable=function(e){var r;n.save(e),n.names=[],n.skips=[];var t=("string"==typeof e?e:"").split(/[\s,]+/),s=t.length;for(r=0;r<s;r++)t[r]&&("-"===(e=t[r].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(r=0;r<n.instances.length;r++){var o=n.instances[r];o.enabled=n.enabled(o.namespace)}},n.enabled=function(e){if("*"===e[e.length-1])return!0;var r,t;for(r=0,t=n.skips.length;r<t;r++)if(n.skips[r].test(e))return!1;for(r=0,t=n.names.length;r<t;r++)if(n.names[r].test(e))return!0;return!1},n.humanize=a,n.instances=[],n.names=[],n.skips=[],n.formatters={}}),u=(i.coerce,i.disable,i.enable,i.enabled,i.humanize,i.instances,i.names,i.skips,i.formatters,e(function(e,n){function r(){var e;try{e=n.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(n=e.exports=i).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},n.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+n.humanize(this.diff),!r)return;var t="color: "+this.color;e.splice(1,0,t,"color: inherit");var s=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++s)}),e.splice(o,0,t)},n.save=function(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}},n.load=r,n.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(r())}));u.log,u.formatArgs,u.save,u.load,u.useColors,u.storage,u.colors,u("app:log");u.disable();var C="Hello, "+"Eason"+"!",l=[1,1,2,3,5,8,13].reduce(function(e,n){return e+n},0);document.getElementById("content").innerHTML="\n  <ul>\n  <li>sayHelloTo('Eason') : "+C+"</li>\n  <li>sumArray([1, 1, 2, 3, 5, 8, 13]): "+l+"</li>\n  </ul>\n"}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
